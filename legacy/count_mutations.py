import mol_bio_tools as mbt

input_seq = "CCAACATCCCACTACTTGACTCGTGACGGCATAAAGTAATAGTTGTCAATTTCTAGCTAGGTCGGGGGGGGTTCTCGCATGTCATGAGTCGTCGGACACTCCATAATTGTCCTGGAGCAGTACGACGCCAGTAAATAAAGTGTTTGGTTATCCCGATTACTGAAGAGGTTCTCCGGTAGTTCATTCTGCCCATAAAGTCCCGATCCGTCTCGGACAGTATGCGACATCTGGTAAGCATATCCACTCACTGTCTATTGGTCAGTCCTTGTACCCAGAAGCAACAAGGAGGAGGGGCGGGACATACATAATAGAACACAATGGCGTGGGCAAGGTGAAGGTGCTGGTAGGGACACGGATGGACAGGAAAGCGAAGTTGGAGTGTTGTGCGCTACGGCGACGTCCACTCTGTGCTGGTTGACCCTCTTCGGTCGAACTTCACAATTTCGACAGGATCATTGGGTTGGGTACCACTCGTACCAGTCTTGCAGCGCACCTAATCTCTTGTAATATACAAATCTGTGCCCCTAAGTTCTGAGGAGCTCGTCGGACATTCCGAGAGAGATGGGCTTACAGCCTTGTAGTGAGATAAGAAGCTACCTTAAAACCCGTAAGAGCGGCGCGCCCCGACAATTTCATTGTGGGCATCATTAGTGGCAGCGCGTCTAGGGGGCACGCGTCTACTCAATGAGCGATGGTACGCGTATCCTTGTTAAACATAAGTGATTGAGCTCTCCCCTGTCACGGACCACTAAAAGAATCTATGTTGCAATAGTTCAAGAAGTGATGACCAGTGCTGCGCACTCAAGCGTATGCGATAATCATCTATGTCGGGTGAATGTCGGAGGAGGCTTGAACCAATTAAGCCATAGGACTTCTGCTCGTCCCCGTGGACCGTTTGACTTGGGTACGGTGAGCGTCGCTGCTAAG"
input_seq1 = "TAAGCATCGAGTTACTTGTAGGGGAACAGTATGAAGTGATGGTCGTAAATTCTTTTTCAGGTACGTGGGCTTTATCCTATCGATGCTCTCATCGACGACTTCCGTACTATCGTGAGGCTGAAGTACAACCTTACAGCGTGCATTTCGGATTGCCCTGAAGTGATCTAACTCTCAGCTAGCTGAACCTTCCCCTAAAAGCATAATCGGCGGCGGACATCCAGCGAGATCCACGGAACTAACCTAGTATCTGAGTATTCGACAGCCTCGGAAACTAGGTGTTTTAAGCACAAGTGCCCGCTCACACCCCATTGAGCAGAAAGGCGTGCGCAATATGCGGACGTCGAGTGGGACCCGGAGGTAAGGGAACGCGACGTAGCGGTTTTAAGCCTTATGGCGGCGCTCCCTCTCAGCTGCCCAGCCCCGTAGGATTGATCTTCCCCATTAGGTATGTCTCTATGGGTCGGTATAGAGTCAAAGGATAGGGTTGACTCACCAAATAGCTCGTGGGCCACAAATACCCGCCCGAGATTGCTAAATAGTATAGCGGTCGTTGCTCCGCACCTGCGGGCACCTCCGCGCTTTGATTAAAAGTGATTGCGTCAGAGCAATCAGCTCGAACGGCCCCGAGTAGGTCGTTGTTTTTCTGAACACGAGCCGAGACCCTGAGTTCCCAGCGTCCCAAAGATGTGCGATACCCAGCGTCTCCTTGTAGTACAGAAATGATGGATCTCGTAGTTTTTACTAAATACTAAGGACCAATGTATAGCCGAACTGGGAGAAGCCATCACATCTCCGGACCCCTCATGGAGTTCAGTTAATAGTCCAGTTACGGTCACGCTCGGATCCGCCTGGACAGAGCCTCTCCCTAGTAGTCGCTCTCGATGCCGTCTGGCGAGACAGTCGGTCAGGAATCGAGATGAGGTTTGT"

def calc_hamming(seq1:str, seq2:str)->int:
    seq1 = seq1.upper()
    seq2 = seq2.upper()
    length = len(seq1)
    hamming = 0
    for i in range(length):
        if seq1[i]==seq2[i]:
            continue
        else:
            hamming += 1
    return hamming


test_seq = mbt.is_dna_seq(input_seq)
print(test_seq)
hamming_calc = calc_hamming(input_seq, input_seq1)
print(hamming_calc)
#def clean_dna_seq(input_seq:str)->str:


